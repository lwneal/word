#!/usr/bin/env python2
"""
A dumb alternative to awk for Python users. Useful as a tool called from vim.
Meant to replace cantrips like `awk '{print $2}'` in day-to-day usage.

Examples:

Print the fourth word on every line:

    cat mytext.txt | word 3

Print the first and last word of every line:

    cat mytext.txt | word 0,-1

Print the third and first entries in a tab-delimited CSV text file:

    cat foo.csv | word tabs[2],tabs[0]

In a tab-delimited CSV file, print all entries except the last three:

    cat foo.csv | word tabs[:-3]

Print Alice in Wonderland, removing every word that begins with the letter K

    curl lwneal.com/alice.txt | word '[w for w in words if not w.startswith("k")]'

Print the numbers from 1 to 100.
But for multiples of three print "Fizz" instead, and for the multiples of five print "Buzz". 

    seq 100 | word '"fizzbuzz" if not int(line) % 15 else "fizz" if not int(line) % 5 else "buzz" if not int(line) % 3 else line'

In Vim, replace all selected text with the second word of each line

    !word w[1]
"""
# Libraries available while parsing
import sys
import re
import json


def parse_argv_word_indices(user_input):
    indices = user_input.split(',')
    return [int(i) for i in indices]


def print_stdin_word_indices(indices):
    for line in sys.stdin:
        try:
            words = line.split()
            print ' '.join([words[i] for i in indices])
        except:
            pass


def exec_argv_as_python(user_input):
    for line in sys.stdin:
        try:
            words = line.split()
            tabs = line.split('\t')
            commas = line.split(',')
            w = words
            t = tabs
            c = commas
            cmd = 'val = ' + user_input
            exec(cmd)
            if type(val) is list:
                if val:
                    print ' '.join(val)
            elif val is not None:
                print(val)
        except:
            raise


def main():
    user_input = ' '.join(sys.argv[1:])
    try:
        indices = parse_argv_word_indices(user_input)
        print_stdin_word_indices(indices)
        return
    except:
        pass
    exec_argv_as_python(user_input)


if __name__ == '__main__':
    main()


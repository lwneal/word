#!/usr/bin/env python2
"""
A dumb alternative to awk for Python users. Useful as a tool called from vim.
Meant to replace cantrips like `awk '{print $2}'` in day-to-day usage.

Examples:

Print the first word on every line:

    cat mytext.txt | line words[0]

Print the first and last word of every line:

    cat mytext.txt | line words[0],words[-1]
or
    cat mytext.txt | line w[0],w[-1]

Print the third and first entries in a tab-delimited CSV text file:

    cat foo.csv | line tabs[2],tabs[0]

Print every word in Alice in Wonderland that starts with the letter K

    curl lwneal.com/alice.txt | line '[w for w in words if w.lower().startswith("k")]'

Print the numbers from 1 to 100.
But for multiples of three print "Fizz" instead, and for the multiples of five print "Buzz". 

    seq 100 | line '"fizzbuzz" if not int(line) % 15 else "fizz" if not int(line) % 5 else "buzz" if not int(line) % 3 else line'

In Vim, replace all selected text with the second word of each line

    !line w[1]
"""
import sys

# Input is sys.argv and stdin
# argv: Python code that should be run in a context where 'line' is a variable
# stdin: The lines of text to operate on

for line in sys.stdin:
    try:
        tabs = line.split('\t')
        t = tabs
        words = line.split()
        w = words
        commas = line.split(',')
        c = commas
        cmd = 'val = ' + ' '.join(sys.argv[1:])
        exec(cmd)
        if type(val) is list:
            if val:
                print ' '.join(val)
        elif val is not None:
            print(val)
    except:
        pass
